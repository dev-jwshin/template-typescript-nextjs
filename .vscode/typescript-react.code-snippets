{
  "React Component with TypeScript": {
    "prefix": "rfc",
    "body": [
      "'use client'",
      "",
      "import React from 'react'",
      "import { cn } from '@/lib/utils'",
      "",
      "interface ${1:ComponentName}Props {",
      "  className?: string",
      "  children?: React.ReactNode",
      "}",
      "",
      "export function ${1:ComponentName}({ className, children, ...props }: ${1:ComponentName}Props) {",
      "  return (",
      "    <div className={cn('$2', className)} {...props}>",
      "      $3",
      "    </div>",
      "  )",
      "}",
      ""
    ],
    "description": "Create a React functional component with TypeScript"
  },
  "API Hook Template": {
    "prefix": "api-hook",
    "body": [
      "import { useMutation, useQuery, useQueryClient, UseQueryOptions } from '@tanstack/react-query'",
      "import { useRouter } from 'next/navigation'",
      "import { toast } from 'react-hot-toast'",
      "import { apiUtils } from '@/lib/api'",
      "import { API_ENDPOINTS, QUERY_KEYS } from '@/lib/constants'",
      "import type { $1, Create$1Request, Update$1Request, CrudQuery, PaginatedResponse, QueryError } from '@/types/api'",
      "",
      "type MutationOptions<TData, TVariables> = {",
      "  onSuccess?: (data: TData, variables: TVariables) => void",
      "  onError?: (error: QueryError, variables: TVariables) => void",
      "}",
      "",
      "class $1Api {",
      "  private queryClient = useQueryClient()",
      "  private router = useRouter()",
      "",
      "  index(query?: CrudQuery, options?: Omit<UseQueryOptions<PaginatedResponse<$1>, QueryError>, 'queryKey' | 'queryFn'>) {",
      "    const queryString = query ? `?\\${apiUtils.buildCrudQuery(query)}` : ''",
      "    return useQuery({",
      "      queryKey: [...QUERY_KEYS.${1/(.*)/${1:/upcase}/}_LIST, query],",
      "      queryFn: async (): Promise<PaginatedResponse<$1>> => {",
      "        return apiUtils.get<PaginatedResponse<$1>>(`\\${API_ENDPOINTS.${1/(.*)/${1:/upcase}/}.BASE}\\${queryString}`)",
      "      },",
      "      staleTime: 5 * 60 * 1000,",
      "      ...options,",
      "    })",
      "  }",
      "",
      "  show(id: string, options?: Omit<UseQueryOptions<$1, QueryError>, 'queryKey' | 'queryFn'>) {",
      "    return useQuery({",
      "      queryKey: QUERY_KEYS.${1/(.*)/${1:/upcase}/}_BY_ID(id),",
      "      queryFn: async (): Promise<$1> => {",
      "        return apiUtils.get<$1>(API_ENDPOINTS.${1/(.*)/${1:/upcase}/}.BY_ID(id))",
      "      },",
      "      enabled: !!id,",
      "      staleTime: 5 * 60 * 1000,",
      "      ...options,",
      "    })",
      "  }",
      "",
      "  create(options?: MutationOptions<$1, Create$1Request>) {",
      "    return useMutation({",
      "      mutationFn: async (data: Create$1Request): Promise<$1> => {",
      "        return apiUtils.post<$1>(API_ENDPOINTS.${1/(.*)/${1:/upcase}/}.BASE, data)",
      "      },",
      "      onSuccess: (data, variables) => {",
      "        toast.success('$1 생성이 완료되었습니다')",
      "        this.queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.${1/(.*)/${1:/upcase}/}_LIST[0]] })",
      "        options?.onSuccess?.(data, variables)",
      "      },",
      "      onError: (error, variables) => {",
      "        toast.error('$1 생성 중 오류가 발생했습니다')",
      "        options?.onError?.(error, variables)",
      "      },",
      "    })",
      "  }",
      "}",
      "",
      "export const use$1Api = () => {",
      "  return new $1Api()",
      "}",
      ""
    ],
    "description": "Create an API hook with full CRUD operations"
  },
  "Form Component Template": {
    "prefix": "form-comp",
    "body": [
      "'use client'",
      "",
      "import React from 'react'",
      "import { useForm } from 'react-hook-form'",
      "import { zodResolver } from '@hookform/resolvers/zod'",
      "import { z } from 'zod'",
      "import { Button } from '@/components/ui/button'",
      "import { Input } from '@/components/ui/input'",
      "import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'",
      "",
      "const ${2:${1/(.*)/${1:/downcase}/}}Schema = z.object({",
      "  $3: z.string().min(1, '필수 입력 항목입니다'),",
      "})",
      "",
      "type $1FormData = z.infer<typeof ${2:${1/(.*)/${1:/downcase}/}}Schema>",
      "",
      "interface $1FormProps {",
      "  onSubmit: (data: $1FormData) => void",
      "  isLoading?: boolean",
      "  defaultValues?: Partial<$1FormData>",
      "}",
      "",
      "export function $1Form({ onSubmit, isLoading, defaultValues }: $1FormProps) {",
      "  const form = useForm<$1FormData>({",
      "    resolver: zodResolver(${2:${1/(.*)/${1:/downcase}/}}Schema),",
      "    defaultValues,",
      "  })",
      "",
      "  return (",
      "    <Card className=\"w-full max-w-2xl mx-auto\">",
      "      <CardHeader>",
      "        <CardTitle>$1 폼</CardTitle>",
      "      </CardHeader>",
      "      <CardContent>",
      "        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">",
      "          <div className=\"space-y-2\">",
      "            <label htmlFor=\"$3\" className=\"text-sm font-medium\">",
      "              $3",
      "            </label>",
      "            <Input",
      "              id=\"$3\"",
      "              {...form.register('$3')}",
      "              placeholder=\"$3을 입력하세요\"",
      "            />",
      "            {form.formState.errors.$3 && (",
      "              <p className=\"text-sm text-red-600\">",
      "                {form.formState.errors.$3?.message}",
      "              </p>",
      "            )}",
      "          </div>",
      "",
      "          <div className=\"flex justify-end space-x-4\">",
      "            <Button type=\"button\" variant=\"outline\">",
      "              취소",
      "            </Button>",
      "            <Button type=\"submit\" disabled={isLoading}>",
      "              {isLoading ? '저장 중...' : '저장'}",
      "            </Button>",
      "          </div>",
      "        </form>",
      "      </CardContent>",
      "    </Card>",
      "  )",
      "}",
      ""
    ],
    "description": "Create a form component with validation"
  },
  "List Component Template": {
    "prefix": "list-comp",
    "body": [
      "'use client'",
      "",
      "import React, { useState, useMemo } from 'react'",
      "import Link from 'next/link'",
      "import { Button } from '@/components/ui/button'",
      "import { Input } from '@/components/ui/input'",
      "import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'",
      "import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'",
      "import type { CrudQuery } from '@/types/api'",
      "",
      "const ITEMS_PER_PAGE = 10",
      "",
      "export function $1List() {",
      "  const [currentPage, setCurrentPage] = useState(1)",
      "  const [searchFilter, setSearchFilter] = useState('')",
      "  const [sortBy, setSortBy] = useState<string>('-createdAt')",
      "",
      "  const query = useMemo((): CrudQuery => {",
      "    const baseQuery: CrudQuery = {",
      "      page: {",
      "        offset: (currentPage - 1) * ITEMS_PER_PAGE,",
      "        limit: ITEMS_PER_PAGE,",
      "      },",
      "      sort: [sortBy],",
      "    }",
      "",
      "    if (searchFilter.trim()) {",
      "      baseQuery.filter = {",
      "        'name_like': `%\\${searchFilter.trim()}%`",
      "      }",
      "    }",
      "",
      "    return baseQuery",
      "  }, [currentPage, searchFilter, sortBy])",
      "",
      "  return (",
      "    <Card>",
      "      <CardHeader>",
      "        <CardTitle>$1 목록</CardTitle>",
      "      </CardHeader>",
      "      <CardContent>",
      "        <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">",
      "          <Input",
      "            placeholder=\"검색...\"",
      "            value={searchFilter}",
      "            onChange={(e) => setSearchFilter(e.target.value)}",
      "            className=\"flex-1\"",
      "          />",
      "          <Button>새 항목 추가</Button>",
      "        </div>",
      "",
      "        <div className=\"rounded-md border\">",
      "          <Table>",
      "            <TableHeader>",
      "              <TableRow>",
      "                <TableHead>이름</TableHead>",
      "                <TableHead>생성일</TableHead>",
      "                <TableHead className=\"text-right\">작업</TableHead>",
      "              </TableRow>",
      "            </TableHeader>",
      "            <TableBody>",
      "              {/* 데이터 매핑 */}",
      "            </TableBody>",
      "          </Table>",
      "        </div>",
      "      </CardContent>",
      "    </Card>",
      "  )",
      "}",
      ""
    ],
    "description": "Create a list component with search and pagination"
  },
  "Next.js Page Template": {
    "prefix": "next-page",
    "body": [
      "import { Metadata } from 'next'",
      "",
      "export const metadata: Metadata = {",
      "  title: '$1',",
      "  description: '$2',",
      "}",
      "",
      "export default function $1Page() {",
      "  return (",
      "    <div className=\"container mx-auto px-4 py-8\">",
      "      <h1 className=\"text-2xl font-bold mb-8\">$1</h1>",
      "      $3",
      "    </div>",
      "  )",
      "}",
      ""
    ],
    "description": "Create a Next.js page with metadata"
  },
  "Type Definition Template": {
    "prefix": "type-def",
    "body": [
      "// $1 관련 타입 정의",
      "export interface $1 {",
      "  id: string",
      "  $2: string",
      "  createdAt: string",
      "  updatedAt: string",
      "}",
      "",
      "export interface Create$1Request {",
      "  $2: string",
      "}",
      "",
      "export interface Update$1Request {",
      "  $2?: string",
      "}",
      ""
    ],
    "description": "Create type definitions with CRUD interfaces"
  },
  "Zustand Store Template": {
    "prefix": "zustand-store",
    "body": [
      "import { create } from 'zustand'",
      "import { persist } from 'zustand/middleware'",
      "",
      "interface $1State {",
      "  $2: $3",
      "  set$4: (value: $3) => void",
      "  reset: () => void",
      "}",
      "",
      "export const use$1Store = create<$1State>()()",
      "  persist(",
      "    (set) => ({",
      "      $2: $5,",
      "      set$4: (value) => set({ $2: value }),",
      "      reset: () => set({ $2: $5 }),",
      "    }),",
      "    {",
      "      name: '${2:${1/(.*)/${1:/downcase}/}}-storage',",
      "    }",
      "  )",
      ")",
      ""
    ],
    "description": "Create a Zustand store with persistence"
  },
  "TanStack Query Hook": {
    "prefix": "query-hook",
    "body": [
      "import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'",
      "import { toast } from 'react-hot-toast'",
      "import { apiUtils } from '@/lib/api'",
      "",
      "export function use$1() {",
      "  const queryClient = useQueryClient()",
      "",
      "  const query = useQuery({",
      "    queryKey: ['$2'],",
      "    queryFn: async () => {",
      "      return apiUtils.get('$3')",
      "    },",
      "    staleTime: 5 * 60 * 1000,",
      "  })",
      "",
      "  const mutation = useMutation({",
      "    mutationFn: async (data: $4) => {",
      "      return apiUtils.post('$3', data)",
      "    },",
      "    onSuccess: () => {",
      "      toast.success('성공적으로 처리되었습니다')",
      "      queryClient.invalidateQueries({ queryKey: ['$2'] })",
      "    },",
      "    onError: () => {",
      "      toast.error('처리 중 오류가 발생했습니다')",
      "    },",
      "  })",
      "",
      "  return { query, mutation }",
      "}",
      ""
    ],
    "description": "Create a TanStack Query hook with mutation"
  }
}